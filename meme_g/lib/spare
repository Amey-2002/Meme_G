//account_det

/*{
State<account_det>  createState() => account_det_state();
}

class  account_det_state extends State<account_det>
{
  void createn()
  {
    setState(() {});
  }

  //latest dependencies for image editor
  image_picker: ^0.8.4+4
  extended_image: ^5.1.3
  image_editor: ^1.0.2
  flutter_image_editor: ^1.2.0
  share: ^2.0.4
  photo_view: ^0.13.0
  gallery_saver: ^2.3.2

  //older dependencies for image editor
  share: ^0.6.4 
  gallery_saver: ^2.0.1 
  image_picker: ^0.6.7+4 
  photo_view: ^0.9.2 
  cached_network_image: ^2.2.0+1 
  image_editor: ^0.7.1 
  extended_image: ^0.9.0

  /*
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-storage.js"></script>

  <script>
    // Import the functions you need from the SDKs you need

    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    const firebaseConfig = {
      apiKey: "...",
      authDomain: "...",
      projectId: "...",
      storageBucket: "...",
      messagingSenderId: "...",
      appId: "..."
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
  </script>*/

//<<<<<<< Shubham
  //firestore dependencys
  //cloud_firestore: ^2.5.4

  //           19th NOV 2021
  //firebase exception no firebase app [default] has been created
  //1> in C:\Users\shubh\Documents\GitHub\Meme_G\meme_g\android\app\build.gradle
  /*
  line 47>>>>>>> minSdkVersion 19
  line 49>>>>>>> multiDexEnabled true
  line 69>>>>>>> implementation 'com.android.support:multidex:1.0.3'
  //2> in pubspec.yaml
  //firebase_core: ^1.8.0
  //3> in main
  /*import 'package:firebase_core/firebase_core.dart';
void main() async {
   WidgetsFlutterBinding.ensureInitialized();
   await Firebase.initializeApp();
   runApp(MyApp());
}*/

//           20th NOV 2021
//IN >>>\meme_g\android\build.gradle
//Line 2 >>>> ext.kotlin_version = '1.4.32'

//in >>>> C:\Users\shubh\Downloads\flutter_windows_2.5.2-stable\flutter\.pub-cache\hosted\pub.dartlang.org\extended_image_library-3.1.0\lib\src\extended_image_provider.dart
//Line 18 >>>>   bool get cacheRawData = true;
//s>>>>>>> Amey
 // cloud_firestore: ^3.1.0

  /* onPressed: () async {
                  dynamic resultuser = await authObject.googleSignin();
                  if (resultuser == null) {
                    print("sign in failed");
                  } else {
                    Navigator.pushNamed(context, Homescreen.route);
                    print(resultuser.uid);
                  }
                },*/

>>>> C:\Users\shubh\Downloads\flutter_windows_2.5.2-stable\flutter\.pub-cache\hosted\pub.dartlang.org\extended_image_library-3.1.0\lib\src\_platform_web.dart
In _platform_web.dart,
Line 26 >>> void writeAsBytesSync(List<int> bytes);

//showImage widget takes an File and displays as image
Widget showImage() {
    return FutureBuilder<File>(
      future: imageFile,
      builder: (BuildContext context, AsyncSnapshot<File> snapshot) {
        imageFileReturn = snapshot.data;
        if (snapshot.connectionState == ConnectionState.done &&
            snapshot.data != null) {
          return Image.file(
            snapshot.data,
            width: 400,
            height: 400,
          );
        } else if (snapshot.error != null) {
          return const Text(
            'Error
Picking Image',
            textAlign: TextAlign.center,
          );
        } else {
          return const Text(
            'No Image Selected',
            textAlign: TextAlign.center,
          );
        }
      },
    );
  }

//error while using flutter image editor pro
RangeError (RangeError (index): Invalid value: Valid value range is empty: -1)

toDoList
1) from personal Info page add function to let user edit its info 

import 'package:animated_splash_screen/animated_splash_screen.dart';
import 'package:flutter/material.dart';
import 'package:meme_g/screens/wrapper.dart';
import 'package:splash_screen_view/SplashScreenView.dart';

class splash_screen extends StatelessWidget {
  const splash_screen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;

    return SplashScreenView(
        navigateRoute: Wrapper(),
        duration: 3000,
        imageSize: screenHeight.round()-20,
        imageSrc: 'assets/dummyMemes/TicklesPhoneWallpaper.gif',
      
    );
    // AnimatedSplashScreen(
    //   splash: 'assets/dummyMemes/TicklesPhoneWallpaper.gif',
    //   nextScreen: Wrapper(),
    //   splashIconSize: double.infinity,
    // );
  }
}

>>>> main

// import 'package:meme_g/widgets/theme_provider.dart';
//ProflieImagePicker.route: (context) => ProflieImagePicker(),
/*Route<dynamic> generateRoute(RouteSettings routeSettings){
    switch(routeSettings.name)
    {
      case Account_det.route :
        return MaterialPageRoute(builder: (context) => Account_det());
      case SaveUpload.route :
        return MaterialPageRoute(builder: (context) => SaveUpload());
      case DummySignIn.route :
        return MaterialPageRoute(builder: (context) => DummySignIn());
      case ImageEditor.route :
        return MaterialPageRoute(builder: (context) => ImageEditor());
      default:
        return MaterialPageRoute(builder: (context) => Homescreen());
    }
  }*/

  /* Future<bool> _onbackepressed(){
    return showDialog(
    context:  context, 
    builder: (context)=> AlertDialog(
     title: Text("Do you want to exit?"),
      actions:<Widget> [
        FlatButton(onPressed: ()=> Navigator.pop(context,false)  
        , 
        child:Text("No") ),
        FlatButton(
          onPressed: ()=> Navigator.pop(context,true), 
            child: Text("Yes"))
      ],
    )
  );
  }*/

    /*WillPopScope(
      child: Wrapper(),
      onWillPop: /*_onbackepressed*/);*/

>>>>sign_in_screen
        /*appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),*/
/*dynamic resultuser = await authObject.AnonymousSignIn();
                  if (resultuser == null) {
                    print("sign in failed");
                  } else {
                    Navigator.pushNamed(context, Homescreen.route);
                    print(resultuser.uid);
                  }*/

                  //foregroundColor: Colors.green,
                  //backgroundColor: Colors.white,
    
                    // Navigator.pushNamed(context, Account_det.route);
              
                    print('accounts_det screen called');
                    
                  // Navigator.pop(context);
                  // Navigator.pushNamed(context, Homescreen.route);
                  // usersCollectionRef
                  //     .doc(googleUserUid)
                  //     .get()
                  //     .then((DocumentSnapshot documentSnapshot) {
                  //   if (documentSnapshot.exists) {
                  //     setState(() {
                  //       alreadyUser = true;
                  //     });
                  //   }
                  // });
                  
                  //print(resultuser.accessToken);

>>>>emailandPass_signin

                  // Navigator.pop(context);
                  //Navigator.pushNamed(context, Homescreen.route);
                  
                  // setState(() {
                  //   CircularProgressIndicator(
                  //     backgroundColor: Colors.greenAccent,
                  //   );
                  // });
                  //
                  
                  // Navigator.pop(context);
                  // Navigator.pushNamed(context, Homescreen.route);
                  // usersCollectionRef
                  //     .doc(googleUserUid)
                  //     .get()
                  //     .then((DocumentSnapshot documentSnapshot) {
                  //   if (documentSnapshot.exists) {
                  //     setState(() {
                  //       alreadyUser = true;
                  //     });
                  //   }
                  // });
                  
                  //print(resultuser.accessToken);

>>>>homescreen

      /*leading: CircleAvatar(
          backgroundColor: Colors.white,
          foregroundColor: Colors.white,
          radius: 36,
          backgroundImage: NetworkImage(
              'https://cdn3.iconfinder.com/data/icons/google-material-design-icons/48/ic_account_circle_48px-512.png'),
          // child: IconButton(
          //   onPressed: () {},
          //   icon: Icon(
          //     Icons.account_circle_sharp,q 
          //     color: Colors.white,
          //   ),
          //   iconSize: 40,
          // ),
        ),*/
      // IconButton(
      //   onPressed: () {},
      //   icon: Icon(Icons.account_circle_rounded),
      //   iconSize: 36,
      // ),
       /*Text(
          'Tickles',
          style: TextStyle(
            fontSize: 25,
          ),
        ),*/
      // backgroundColor: Colors.red[900],
      
    //final createHeight = MediaQuery(data: MediaQueryData, child: Create());
    // final text = Provider.of<ThemeProvider>(context).themeMode ==ThemeMode.dark
    //     ? 'DarkTheme'
    //     : 'LightTheme';
    
      /*leading: CircleAvatar(
          backgroundColor: Colors.white,
          foregroundColor: Colors.white,
          radius: 36,
          backgroundImage: NetworkImage(
              'https://cdn3.iconfinder.com/data/icons/google-material-design-icons/48/ic_account_circle_48px-512.png'),
          // child: IconButton(
          //   onPressed: () {},
          //   icon: Icon(
          //     Icons.account_circle_sharp,q 
          //     color: Colors.white,
          //   ),
          //   iconSize: 40,
          // ),
        ),*/
      // IconButton(
      //   onPressed: () {},
      //   icon: Icon(Icons.account_circle_rounded),
      //   iconSize: 36,
      // ),
       /*Text(
          'Tickles',
          style: TextStyle(
            fontSize: 25,
          ),
        ),*/
      // backgroundColor: Colors.red[900],
      
      // AppBar(
      //     backgroundColor: appbarcolor? Colors.grey.shade800: Colors.white,
      //     foregroundColor: Colors.green,
      //     /*leading: CircleAvatar(
      //     backgroundColor: Colors.white,
      //     foregroundColor: Colors.white,
      //     radius: 36,
      //     backgroundImage: NetworkImage(
      //         'https://cdn3.iconfinder.com/data/icons/google-material-design-icons/48/ic_account_circle_48px-512.png'),
      //     // child: IconButton(
      //     //   onPressed: () {},
      //     //   icon: Icon(
      //     //     Icons.account_circle_sharp,
      //     //     color: Colors.white,
      //     //   ),
      //     //   iconSize: 40,
      //     // ),
      //   ),*/
      //     // IconButton(
      //     //   onPressed: () {},
      //     //   icon: Icon(Icons.account_circle_rounded),
      //     //   iconSize: 36,
      //     // ),
      //     title: Image.asset(
      //          appbarcolor?
      //          'assets/dummyMemes/TicklesDarkAppBar.png'
      //         :'assets/dummyMemes/Ticklesappbar.png') /*Text(
      //     'Tickles',
      //     style: TextStyle(
      //       fontSize: 25,
      //     ),
      //   ),*/
      //     // backgroundColor: Colors.red[900],
      //     ),
      /*bottomNavigationBar: BottomNavigationBar(
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('Home')),
          BottomNavigationBarItem(icon: Icon(Icons.chat), title: Text('Chats')),
          BottomNavigationBarItem(
              icon: IconButton(
                icon: Icon(Icons.account_circle),
                onPressed: () {

                  Navigator.pushReplacementNamed(context,personal_info.route);

                //  Navigator.pushNamed(context, personal_info.route);

                },
              ),
              title: Text('You')),
        ],
      ),*/
                    //decoration: TextDecoration.underline,

>>>>account details

          /*Center(
            child: Padding(
              padding: const EdgeInsets.all(15.0),
              child: CircleAvatar(
                radius: 80,
                child: Icon(Icons.account_circle),
              ),
            ),
          ),*/
          //ProfilePage().setUid = userid,

          /*RaisedButton(
            child: Text("Set Profile Picture"),
            onPressed: () {
            },
          ),*/
          //ProfilePage(),
          //dp,
          
          /*Container(
            child: TextField(
                decoration: InputDecoration(hintText: "Enter name"),
                onChanged: (uname) {
                  setState(() {
                    name = uname;
                  });
                }),
          ),*/
          
          // Text_fields("Enter EmailId",emailid),
          /*Container(
            child: TextField(
                decoration: InputDecoration(hintText: "Enter EmailId "),
                onChanged: (email) {
                  setState(() {
                    emailid = email;
                  });
                }),
          ),*/
          
          // Text_fields("Enter password",upassword),
          
                //borderRadius: BorderRadius.circular(16.0),
                //Icons.format_list_numbered,
                
                    // Navigator.pop(context);
                    // Navigator.pushNamed(context, Homescreen.route);
                    
                    //result.uid; 
                  //borderRadius: BorderRadius.circular(16.0),
                  //style: TextStyle(color: Colors.blue),
            //Text('Birth Date'),

>>>> liked memes
,
                                            /*Column(
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          IconButton(
                                            icon: Icon(Icons.arrow_back),
                                            onPressed: () =>
                                                Navigator.pop(context),
                                          ),*/
                                            //     PhotoView(
                                            //   imageProvider: NetworkImage(
                                            //     snapshot.data?.docs[index]
                                            //         .get('url'),
                                            //   ),
                                            // ),
                                            /*],
                                      ),*
>>>> My work

  /*checkAuthentification() async {
    _auth.authStateChanges().listen((user) {
      _user = user;
    });
  }*/

  /*getUser() async {
    User? firebaseUser = _auth.currentUser;

    await firebaseUser?.reload();

    firebaseUser = _auth.currentUser;

    if (firebaseUser != null) {
      setState(() {
        this._user = firebaseUser;

        this.isloggedin = true;
      });
    }
  }*/

                                            /*Column(
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          IconButton(
                                            icon: Icon(Icons.arrow_back),
                                            onPressed: () =>
                                                Navigator.pop(context),
                                          ),*/
                                            //     PhotoView(
                                            //   imageProvider: NetworkImage(
                                            //     snapshot.data?.docs[index]
                                            //         .get('url'),
                                            //   ),
                                            // ),
                                            /*],
                                      ),*/

>>>>personal Info

//import 'package:meme_g/screens/account_details_screen.dart';
//import 'account_details_screen.dart';
  //personal_info(this.uId);
  //String? uId;
  /*set setuid
  (UserId){
    uid = UserId;
  }*/
  
  // var account_info = Account_det();
  //void edit_info() {}
                        //tileColor: Colors.green.shade100,
                          //Icons.format_list_numbered,
                          // color: Colors.green,
                        //Text('Birth Date'),

>>>profile Image picker

/*class ProflieImagePicker extends StatefulWidget {
  static const route = 'profile_image_picker_screen';
  // This widget is the root of your application.
  @override
  State<ProflieImagePicker> createState() => _ProflieImagePickerState();
}

class _ProflieImagePickerState extends State<ProflieImagePicker> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ProfilePage(),
    );
  }
}*/

  //final String uid;
  //ProfilePage({required this.uid});
  //late File _pickedImage;
  //File _pickedImage = File('C:/Users/shubh/Documents/GitHub/Meme_G/meme_g/lib/spare.txt');
  //Image(image: NetworkImage('https://cdn3.iconfinder.com/data/icons/google-material-design-icons/48/ic_account_circle_48px-512.png'));


                              // IconButton(
                              //   onPressed: () {},
                              //   icon: Icon(Icons.account_circle_rounded),
                              //   // iconSize: 80,
                              // ),
                            
                //backgroundImage:,
                //_pickedImage != null ? FileImage(_pickedImage!) : null,
                
          //const SizedBox(height: 10.0),
    //File picked = await ImagePicker.pickImage(source: source);
     /*ImageSource.camera*/
     
        //CropAspectRatioPreset.original,
        //CropAspectRatioPreset.ratio16x9,
        //CropAspectRatioPreset.ratio4x3,
      
      /*var snapshot = await firebase_storage.FirebaseStorage.instance
          .ref()
          .child('Profile-Image/${Path.basename(_pickedImage!.path)}')
          .putFile(_pickedImage!);
      var downloadUrl = await snapshot.ref.getDownloadURL();
      setState(() {
        profileImageUrl = downloadUrl;
      });*/
      
          /*if (uid == '') {
            setState(() {
              profileImageUrl = value;
            });
          } else {*/
          //Database(uid: uid).updateUserProfileImage(url: value);
          //FirebaseFirestore.instance
          //.collection('')
          
  /*Future _uploadImageToFirebase(BuildContext context) async {
    String fileName = Path.basename(_pickedImage!.path);
    firebase_storage.Reference ref =
    firebase_storage.FirebaseStorage.instance
        .ref().child('Profile Photo').child('/$fileName');

    final metadata = firebase_storage.SettableMetadata(
        contentType: 'image/jpeg',
        customMetadata: {'picked-file-path': fileName});
    firebase_storage.UploadTask uploadTask;
    //late StorageUploadTask uploadTask = firebaseStorageRef.putFile(_imageFile);
    uploadTask = ref.putFile(io.File(_pickedImage!.path), metadata);

    firebase_storage.UploadTask task= await Future.value(uploadTask);
    Future.value(uploadTask).then((value) => {
    print("Upload file path ${value.ref.fullPath}")
    }).onError((error, stackTrace) => {
      print("Upload file path error ${error.toString()} ")
    });
  }*/

>>>>profileimage 

                    // IconButton(
                    //   onPressed: () {},
                    //   icon: Icon(Icons.account_circle_rounded),
                    //   // iconSize: 80,
                    // ),

>>>> guest meme view

              /*Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: const <Widget>[
                Icon(
                  Icons.account_circle,
                  size: 37,
                ),
                (widget.userName == null)?
                Text(
                   'Username',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                ) :
                
                Text(
                  widget.userName,
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                )
              ],
            ),*/
            
                //Icon(Icons.favorite_border,size: 27,),
                //Icon(Icons.send,size: 27,),
                //Icon(Icons.share,size: 27,),

>>>>meme view

              /*Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: const <Widget>[
                Icon(
                  Icons.account_circle,
                  size: 37,
                ),
                (widget.userName == null)?
                Text(
                   'Username',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                ) :
                
                Text(
                  widget.userName,
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                )
              ],
            ),*/
            
                //Icon(Icons.favorite_border,size: 27,),
                //Icon(Icons.send,size: 27,),
                //Icon(Icons.share,size: 27,),
                
                  // iconDisabledColor: Colors.white,
                    //List array = likedMemesRef.doc(likedMemeDocFinal).get(Field) as List;
                    
                    // if (_liked) {
                    //   likedMemesRef.doc(likedMemeDocFinal).set({
                    //     'url': widget.imgUrl,
                    //     'Username': widget.userName,
                    //     'DateTime':
                    //         DateTime.now().microsecondsSinceEpoch.toString()
                    //   });
                    // } else {
                    //   likedMemesRef.doc(likedMemeDocFinal).delete();
                    // }
                    
                /*RaisedButton(
                  //Shubham : I tried using using this which is a property of ElevatedButton
                  /*style: ButtonStyle(
                    backgroundColor: MaterialStateProperty.resolveWith<Color>(
                        (Set<MaterialState> states) {
                      if (states.contains(MaterialState.pressed))
                        return Colors.greenAccent;
                      return Colors.grey;
                    }),
                  ),*/
                  color: liked ? Colors.greenAccent[700] : Colors.grey,
                  onPressed: () async {
                    liked = !liked;
                    if (liked) {
                      likedMemesRef.doc(likedMemeDocFinal).set({
                        'url': widget.imgUrl,
                        'Username': widget.userName,
                        'DateTime':
                            DateTime.now().microsecondsSinceEpoch.toString()
                      });
                    } else {
                      likedMemesRef.doc(likedMemeDocFinal).delete();
                    }
                    //print(likedMemeDocFinal);
                    //setState(() => pressAttention = false);
                    /*await likedMemesRef.doc(likedMemeDocFinal).set({
                      'url': widget.imgUrl,
                      'Username': widget.userName,
                      'DateTime':
                          DateTime.now().microsecondsSinceEpoch.toString()
                    });*/
                  },
                  child: Icon(
                    Icons.favorite_border,
                    size: 27,
                  ),
                ),*/

>>>>auth 
//import 'dart:html';

  /*String getFirebaseUserId(User user){
    return user.uid;
  }*/
  
      //User _user;
      
/*class Authx {
  dynamic _useremail, _userpassword;
  final FirebaseAuth _Authenctication = FirebaseAuth.instance;
  GoogleSignIn _googleSignIn = GoogleSignIn();
  UserF? _userfirebase(User user) {

    return user != null ? UserF.uid(user.uid) : null;
  }

  /*String getFirebaseUserId(User user){
    return user.uid;
  }*/

  //sign in Anonymously
  Future AnonymousSignIn() async {
    try {
      UserCredential response = await _Authenctication.signInAnonymously();
      User? user = response.user;
      return user;
    } catch (error) {
      return print(error.toString());
      return null;
    }
  }

  //sign in with email and password
  Future EmailandpassSignIn(_useremail, _userpassword) async {
    try {
      UserCredential response =
          await _Authenctication.signInWithEmailAndPassword(
              email: _useremail, password: _userpassword);
      User? user = response.user;
      return user;
    } catch (error) {
      return print(error.toString());
      return null;
    }
  }

  //create Account OR register account
  Future createAccount(_useremail, _userpassword) async {
    try {
      UserCredential response =
          await _Authenctication.createUserWithEmailAndPassword(
              email: _useremail, password: _userpassword);
      User? user = response.user;
      return user;
    } catch (error) {
      return print(error.toString());
      return null;
    }
  }

  //Google Sign-in
  Future googleSignin() async {
    try {
      GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      GoogleSignInAuthentication google_auth = await googleUser!.authentication;
      AuthCredential user = GoogleAuthProvider.credential(
          accessToken: google_auth.accessToken, idToken: google_auth.idToken);
      //User _user;
      UserCredential google_user = await _Authenctication.signInWithCredential(user);
      User? uSer = FirebaseAuth.instance.currentUser; 
      setState(() {
      name = user!.displayName;
      emailid = user!.email;
    });
      print(uSer!.displayName);
      return googleUser;
    } catch (error) {
      print(error);
      print("signin failed");
    }
  }
    //sign out
  Future<User?> signout() async{
   
   try { await _Authenctication.signOut(); 
   print("signed out");}
   catch(error){
    print(error);
   }
  }
  }*/

  >>>> ask question
  
                              // print("The value entered is : $value");
                              
                              print(question);
                              
                                  // reportRef.doc(user!.uid).set({'report': report});

>>>> Profileimage2

>>>> rate

            /*Positioned(
              top: -380,
              left: -187,
              child: Opacity(
                opacity: 0.9,
                child: Image.asset(''),
              ),
            ),*/
                    // // CircleAvatar(
                    // //   backgroundColor: Colors.white,
                    // //   child: Icon(
                    // //     Icons.account_circle_rounded,
                    // //     size: 150,
                    // //   ),
                    //   // foregroundImage: NetworkImage(),
                    //   // backgroundImage: NetworkImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSRlybPj2CVQpdYMY2HSNEKLbT5PFv33ZThDg&usqp=CAU'),
                    //   // foregroundImage: NetworkImage(
                    //   //      'https://thumbs.dreamstime.com/b/feedback-concept-image-arrows-blue-chalkboard-background-40378284.jpg'),
                    //   radius: 90,
                    // ),
                    // Image.asset(
                    //   'assets/dummyMemes/1.jpg',
                    //   width: getScreenProportionWidth(166, size),
                    //   // height: getScreenProportionHeight(166,size),
                    //   // fit: BoxFit.cover,
                    // ),

                    // Image.asset(
                    //   'assets/dummyMemes/2.png',
                    //   width: getScreenProportionWidth(166, size),
                    // ),
  // void setState(Null Function() param0) {}

  >>>>report bug
  
            /*Positioned(
              top: -380,
              left: -187,
              child: Opacity(
                opacity: 0.9,
                child: Image.asset(''),
              ),
            ),*/

>>>>settings_page

        // subtitle: '',
        // leading: IconWidget(icon: Icons.delete, color: Colors.blueAccent),
        // onTap: () {},
        
  // Widget buildNotifications(BuildContext context) => SimpleSettingsTile(
  //       title: 'Notifications',
  //       leading: Switch(
  //         value: false,
  //         onChanged: (newvalue) {},
  //         trackColor: MaterialStateProperty.all(Colors.grey.shade400),
  //         thumbColor: MaterialStateProperty.all(Colors.white30),
  //       ),
  //       // subtitle: '',
  //       // leading: IconWidget(icon: Icons.delete, color: Colors.blueAccent),
  //       // onTap: () {},
  //     );
  
                //AccountPage(),
                // buildNotifications(context),
                //ChangeThemeButtonWidget(),
                //NotificationsPage(),                            ################################################
                //buildLogout(),
                //buildDeleteAccount(),

>>>>theme constants
// import 'package:provider/provider.dart';
// import 'package:theme_provider/theme_provider.dart';

  // floatingActionButtonTheme:
  //     FloatingActionButtonThemeData(backgroundColor: COLOR_ACCENT),
  // elevatedButtonTheme: ElevatedButtonThemeData(
  //   style: ButtonStyle(
  //     backgroundColor: MaterialStateProperty.all<Color>(COLOR_ACCENT),
  //   ),
  // ),

>>>>theme_manager
// import 'package:theme_provider/theme_provider.dart';
// import 'theme_constants.dart';
// if(data?.isEmpty ?? true)

// bool isEmpty(String? s) => s==null || s.isEmpty;

// widget?.cameras?.isEmpty == true

>>>>drawer

           //await Navigator.popAndPushNamed(context,signIn.route);
           // userstate=false;
            //Navigator.pop(context);

>>>>meme_list
 //Container(
      //use height if you use ListView.builder
      // height: 550, //435 for simulator & 580 for my mobile
      // width: double.infinity,
      // margin: const EdgeInsets.only(left: 10, right: 10),
      //padding: const EdgeInsets.only(top: 10, bottom: 10),
      //if ListView.builder is used then double double scrolling
      //child: 
     
>>>>user.dart
/*extends  StatelessWidget*/ 

  //personal_info display = new personal_info();
  //display.setuid(cuid);
  //String? senduid()
  //{
  //return cuid;
  //}
  //UserF.senduid();

  /* @override
   Widget build(BuildContext context) {
     return Container(
      
     );
      
   }*/

   commented 5338, 5339 in navigator 

>>>>>collage_menu line 28
   child: Stack(
          children: [
            Image.asset(
        child:Image.asset(
              'assets/gridtiles/$imageName.jpg',
              fit: BoxFit.fill,
            ),
            Positioned.fill(
              child: FractionallySizedBox(
                heightFactor: 0.25,
                alignment: Alignment.bottomCenter,
                child: ColoredBox(
                  color: Colors.black.withOpacity(0.75),
                  child: Center(
                    child: Text(
                      title,
                      overflow: TextOverflow.ellipsis,
                      textAlign: TextAlign.center,
                      style: Theme.of(context)
                          .textTheme
                          .headline6!
                          .copyWith(color: Colors.white),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),

>>>> Template screen
  // @override
  // Widget build(BuildContext context) {
  //   print(MemeURL);
  //   print(MemeName);

  //   return Scaffold(
  //     appBar: AppBar(title: Text('Templates')),
  //     body: StreamBuilder<QuerySnapshot>(
  //       stream: templatesRef.snapshots(),
  //       builder: (context, snapshot) {
  //         return !snapshot.hasData
  //             ? Center(
  //                 child: CircularProgressIndicator(),
  //               )
  //             : Container(
  //                 padding: EdgeInsets.all(4),
  //                 child: GridView.builder(
  //                   itemCount: snapshot.data?.docs.length,
  //                   gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
  //                       crossAxisCount: 2),
  //                   itemBuilder: (context, index) {
  //                     return Container(
  //                       margin: EdgeInsets.all(3),
  //                       child: InkWell(
  //                         child: FadeInImage.memoryNetwork(
  //                             fit: BoxFit.cover,
  //                             placeholder: kTransparentImage,
  //                             image: snapshot.data?.docs[index].get('url')),
  //                         onTap: () async {
  //                           Navigator.pop(
  //                               context, snapshot.data?.docs[index].get('url'));
  //                         },
  //                       ),
  //                     );
  //                   },
  //                 ),
  //               );
  //       },
  //     ),
  //   );
  // }

  import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:meme_g/screens/account_details_screen.dart';
import 'package:share/share.dart';

class GuestMemeView extends StatefulWidget {
  final String imgUrl;
  final String userId;

  GuestMemeView({required this.imgUrl, required this.userId});

  @override
  State<GuestMemeView> createState() => _GuestMemeViewState();
}

class _GuestMemeViewState extends State<GuestMemeView> {
  late CollectionReference usersRef;
  late String userName;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    usersRef = FirebaseFirestore.instance.collection('Users');
    FirebaseFirestore.instance.collection('Users').doc(userId).get().then((value){
                        userName = value.get('Username');
                      });
  }
